class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& A) {
        // 思路1：先借用上一题的思路把偶数放在奇数的前面，然后再折半交换偶数位和奇数位的数（半数为偶半数为奇）
        // 思路2：开辟两段内存，分别存储奇数和偶数，再给A重新赋值
       OddAfterEven(A);
       swapOddAndEven(A);
       return A;
    }    
    void OddAfterEven(vector<int> &A)
    {
        int left = 0;
        int right = A.size()-1;
        while(left < right)
        {
            int leftodd = A[left] & 1;
            int rightodd = A[right] & 1;
            if(leftodd == 1 && rightodd == 0)
            {
                int tmp = A[left];
                A[left] = A[right];
                A[right] = tmp;
                left++;
                right--;
            }
            else if(leftodd == 1 && rightodd == 1)
                right--;
            else if(leftodd == 0 && rightodd == 0)
                left++;
            else
            {
                left++;
                right--;
            }
        }
    }
    void swapOddAndEven(vector<int> &A)
    {
        int len = A.size();
        for(int i=0; i<len>>1; i++)
        {
            if(i & 1) 
            {
                int tmp = A[i];
                A[i] = A[len-i-1];
                A[len-i-1] = tmp;
            }
        }
    }
};
