class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        // 思路：排序数组的问题都利用二分查找。拿中间的数字与k比，如果大或小则从左右两边的子数组来找；如果中间的数字与k相等，则看该数字的前面一个数是不是k，如果不是k还要到前面的数组去二分查找；另外还要看该数字的后一个数字是不是k来判断最后一个k的位置。
        if(nums.size() == 0)
            return vector<int>{-1, -1};
        int low = 0, high = nums.size()-1;
        
        
        // int left=-1, right=-1;        
        // while(low <= high)
        // {
        //     int mid = (low+high)/2;
        //     if(nums[mid] == target) // 第一步先确定中间的k所在的位置，然后再寻找其头和尾
        //     {               
        //         if(mid == 0 || nums[mid-1] < target) // 中间的值即第一个target
        //             left = mid;
        //         else
        //             left = GetFirstTarget(nums, target, low, mid-1);
        //         if(mid == nums.size()-1 || nums[mid+1] > target) // 中间的值即最后一个target
        //             right = mid;
        //         else
        //             right = GetLastTarget(nums, target, mid+1, high);
        //         break;
        //     }
        //     else if(nums[mid] < target)
        //         low = mid+1;
        //     else
        //         high = mid-1;
        // }
        
        // 上面注释的一段可以用以下的段来实现，可以节省代码量，但存在一个问题，找第一个K的步骤是重复的
        int left = GetFirstTarget(nums, target, low, high);
        int right = GetLastTarget(nums, target, low, high);
            
        return vector<int>{left, right};
    }
    
    int GetFirstTarget(vector<int> &nums, int target, int start, int end) // 寻找第一个target
    {
        int low = start, high = end;
        while(low <= high)
        {
            int mid = (low+high)/2;
            if(nums[mid] == target)
            {
                if(mid == start || nums[mid-1] < target)// 中间的数即第一个target
                    return mid;
                else // 到前半部分去找
                    high = mid-1;
            }      
            else if(nums[mid] > target)     
                high = mid-1;
            else
                low = mid+1;
        }
        return -1;
    }
    
    int GetLastTarget(vector<int> &nums, int target, int start, int end) // 寻找最后一个target
    {
        int low = start, high = end;
        while(low <= high)
        {
            int mid = (low+high)/2;
            if(nums[mid] == target)
            {
                if(mid == end || nums[mid+1] > target) // 中间的数即最后一个target
                    return mid;
                else // 到后半部分去找
                    low = mid+1;
            }
            else if(nums[mid] > target)
                high = mid-1;
            else
                low = mid+1;
        }
        return  -1;
    }
};
