class Solution {
public:
    int findMin(vector<int>& nums) {

        // int low = 0, high = nums.size()-1;
        // if(nums.size()==1)
        //     return nums[0];
        // else if(nums.size()==2)
        //     return nums[0] > nums[1] ? nums[1] : nums[0];
        // int mid;
        // while(low<high-1)
        // {
        //     mid = (low + high + 1)/2;
        //     if(nums[mid] < nums[high] && nums[mid] < nums[low])
        //     {low++; high--;}
        //     else if(nums[mid] > nums[high] && nums[mid] > nums[low])
        //         low = mid+1;
        //     else if(nums[mid] < nums[high] && nums[mid] > nums[low])
        //         return nums[low];
        // }
        // return nums[low] <= nums[high] ? nums[low] : nums[high];
        
        // 此题需要注意特殊情况的判断
        int low=0, high=nums.size()-1, mid=0;
        while(nums[low] > nums[high]) // 必须是旋转过的数组，如果是顺序数组，没必要往下分析直接返回第一个数
        {
            mid = (low+high+1)/2;
            if(low + 1 == high) // low与high是相邻的，由于每次low或high都是修改成mid，最后low和high是相邻的
                return nums[high];
            if(nums[mid] >= nums[low])
                low = mid;
            else
                high = mid;           
        }
        return nums[mid];
    }
};
