class Solution {
public:
    int majorityElement(vector<int>& nums) {
        // 思路1：使用哈希表，记录所有数字出现的次数，时间复杂度和空间复杂度均为O(N)
        // int res;
        // int max;
        // map<int, int> Map;
        // for(int i=0; i<nums.size(); i++)
        // {
        //     if(Map.find(nums[i]) == Map.end())
        //         Map.insert(make_pair(nums[i], 1));
        //     else
        //         Map[nums[i]]++;
        // }
        // for(map<int,int>::iterator it = Map.begin(); it!=Map.end(); it++)
        //     if(it == Map.begin() || max < it->second)
        //     {
        //         res = it->first;
        //         max = it->second;
        //     }
        // return res;
        
        // 思路2：由于出现次数最多的元素占超过一半，所以排序后的数组中位数一定是要求的目标值，考虑快排中patition的思想，可以把数组拆分成两部分，寻找中位数。时间复杂度为O(N)，空间复杂度为O(logN)
        // int mid = nums.size() >> 1;
        // partition(nums, 0, nums.size()-1, mid);
        // return nums[mid]; // 更完整的代码应该加入错误检查与处理，包括两方面：某个数出现的次数是否超过数组的一半；数组是否为空
        
        // 思路3：在遍历数组的时候保存两个值：一个是数组中的一个数字，另一个是次数; 因为出现次数最多的数超过数组的一半，所以times到最后一定会记录为该数。时间复杂度为O(N)，空间复杂度为O(1)
        int res = nums[0];
        int times = 1;
        for(int i=1; i<nums.size(); i++)
        {
            if(times == 0) 
            // 如果times减到0，重新记录res
            {
                res = nums[i];
                times = 1;
            }
            else
            {
                if(nums[i] == res)
                    times++;
                else 
                    times--;
            }
        }
        return res;
    }
    
    void partition(vector<int>& nums, int start, int end, int &mid)
    {
        if(start >= end)
            return;
        int left = start, right = end;        
        int pivot = nums[(left+right)>>1];
        while(left <= right)
        {
            while(left <= right && nums[left] < pivot)
                left++;
            while(left <= right && nums[right] > pivot)
                right--;
            if(left <= right)
            {
                int tmp = nums[left];
                nums[left] = nums[right];
                nums[right] = tmp;
                right--;
                left++;
            }
        }
        if(right+1 <= mid)
            partition(nums, left, end, mid); // 此处需要注意，不可以在pivot在中间位置的时候直接返回，因为可能出现这样的反例：[8,9,8,9,8],[8,8,9,9,8],由于pivot为8，最右边的值没有与之交换，这时中间值是9，需要再排序一下右半部分才能确定答案
        else 
            partition(nums, start, right, mid);
    }
};
