class MedianFinder {
public:
    /** initialize your data structure here. */
    priority_queue<int, vector<int>, greater<int>> minHeap; // 小顶堆存放较小的数
    priority_queue<int> maxHeap; // 大顶堆存放较大的数
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(minHeap.empty() && maxHeap.empty())
           { maxHeap.push(num); return;}
        if(!maxHeap.empty() && maxHeap.top() > num) // num小于两个堆顶值
        {
            if(maxHeap.size() > minHeap.size())
            {
                int tmp = maxHeap.top();
                maxHeap.pop();
                maxHeap.push(num);
                minHeap.push(tmp);
                return;
            }
            else 
            {
                maxHeap.push(num);
                return;
            }                
        }
       
        if(!minHeap.empty() && minHeap.top() < num) // num大于两个堆顶值
        {
            if(maxHeap.size() <= minHeap.size())
            {
                int tmp = minHeap.top();
                minHeap.pop();
                minHeap.push(num);
                maxHeap.push(tmp);
                return;
            }
            else
            {
                minHeap.push(num);
                return;
            }
        }      
        
        else // num介于两个堆顶之间
        {
            if(maxHeap.size() > minHeap.size())
            {                
                minHeap.push(num);
                return;
            }
            else
            {
                maxHeap.push(num);
                return;
            }
        }
    }
    
    double findMedian() {
        //此处忽略了错误处理，应该考虑在堆为空时的错误处理
        if(minHeap.size() == maxHeap.size())
            return (double)(minHeap.top()+maxHeap.top())/2;
        return (double)maxHeap.top();
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
