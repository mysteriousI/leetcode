/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        // 链表操作，需要定义前指针与当前指针
        if(head == NULL)
            return head;
        ListNode* dummyhead = new ListNode(-1);
        dummyhead->next = head;
        ListNode* pre = dummyhead, *cur = pre->next, *next = cur->next;
        int duplicate = INT_MIN; //设定重复值要判断重复允许的条件
        bool first_visit = true;
        if(next == NULL) // 只有一个节点直接返回
            return head;
        while(cur != NULL)
        {
            if(next && cur->val == next->val)
            {
                ListNode* tmp1 = cur;
                ListNode* tmp2 = next;
                duplicate = cur->val;
                first_visit = false;
                pre->next = next->next;
                delete tmp1;
                delete tmp2;
                cur = pre->next;
                if(cur != NULL)
                    next = cur->next;
                else next = NULL;
                continue;
            }
            else if(cur->val == duplicate && !first_visit) 
            {
                ListNode* tmp = cur;
                pre->next = cur->next;
                delete tmp;
                cur = pre->next;
                if(next)
                    next = next->next;
            }
            else
            {
                pre = pre->next;
                cur = cur->next;
                if(next)
                    next = next->next;
            }
        }
        ListNode* tmp = dummyhead;
        head = dummyhead->next;
        delete tmp;
        return head;
    }
};
