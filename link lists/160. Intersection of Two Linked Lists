/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        // 思路1：借助栈，从尾到头弹出节点来比较最后一个相同节点
        // 如果其中一个链表为空，则返回空指针
        // if(headA == NULL || headB == NULL)
        //     return NULL;
        // ListNode* curA = headA, *curB = headB;
        // stack<ListNode*> storeA, storeB;
        // while(curA)
        // {
        //     storeA.push(curA);
        //     curA = curA->next;
        // }
        // while(curB)
        // {
        //     storeB.push(curB);
        //     curB = curB->next;
        // }        
        // ListNode *common = NULL;
        // while(!storeA.empty() && !storeB.empty() && storeA.top() == storeB.top())
        // {
        //     common = storeA.top();
        //     storeA.pop();
        //     storeB.pop();
        // }
        // return common;
        
        // 思路2：利用两轮遍历，首先确定两个链表哪个最长，再将长的链表多走几步，最后两个链表走相同的步数
        if(headA == NULL || headB == NULL)
            return NULL;
        int lenA = 0, lenB = 0;
        ListNode *curA = headA, *curB = headB;
        while(curA)
        {
            lenA++;
            curA = curA->next;
        }
        while(curB)
        {
            lenB++;
            curB = curB->next;
        }
        curA = headA;
        curB = headB;
        // 使两个链表同步
        while(lenA > lenB)
        {
            curA = curA->next;
            lenA--;
        }
        while(lenB > lenA)
        {
            curB = curB->next;
            lenB--;
        }
        ListNode *common = NULL;
        while(curA && curB && curA != curB)
        {
            curA = curA->next;
            curB = curB->next;
        }
        if(curA && curB)
            common = curA;
        return common;
    }
};
